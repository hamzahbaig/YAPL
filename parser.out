Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMA
    SEMICOLON

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expression
Rule 2     calc -> var_assign
Rule 3     calc -> empty
Rule 4     expression -> PRINT LRB expression RRB
Rule 5     var_assign -> NAME EQUALS expression
Rule 6     expression -> expression MULTIPLY expression
Rule 7     expression -> expression DIVIDE expression
Rule 8     expression -> expression PLUS expression
Rule 9     expression -> expression MINUS expression
Rule 10    expression -> INT
Rule 11    expression -> FLOAT
Rule 12    expression -> STRING
Rule 13    expression -> NAME
Rule 14    empty -> <empty>

Terminals, with rules where they appear

COMMA                : 
DIVIDE               : 7
EQUALS               : 5
FLOAT                : 11
INT                  : 10
LRB                  : 4
MINUS                : 9
MULTIPLY             : 6
NAME                 : 5 13
PLUS                 : 8
PRINT                : 4
RRB                  : 4
SEMICOLON            : 
STRING               : 12
error                : 

Nonterminals, with rules where they appear

calc                 : 0
empty                : 3
expression           : 1 4 5 6 6 7 7 8 8 9 9
var_assign           : 2

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expression
    (2) calc -> . var_assign
    (3) calc -> . empty
    (4) expression -> . PRINT LRB expression RRB
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . STRING
    (13) expression -> . NAME
    (5) var_assign -> . NAME EQUALS expression
    (14) empty -> .

    PRINT           shift and go to state 5
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 9
    $end            reduce using rule 14 (empty -> .)

    calc                           shift and go to state 1
    expression                     shift and go to state 2
    var_assign                     shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression

    $end            reduce using rule 1 (calc -> expression .)
    MULTIPLY        shift and go to state 10
    DIVIDE          shift and go to state 11
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13


state 3

    (2) calc -> var_assign .

    $end            reduce using rule 2 (calc -> var_assign .)


state 4

    (3) calc -> empty .

    $end            reduce using rule 3 (calc -> empty .)


state 5

    (4) expression -> PRINT . LRB expression RRB

    LRB             shift and go to state 14


state 6

    (10) expression -> INT .

    MULTIPLY        reduce using rule 10 (expression -> INT .)
    DIVIDE          reduce using rule 10 (expression -> INT .)
    PLUS            reduce using rule 10 (expression -> INT .)
    MINUS           reduce using rule 10 (expression -> INT .)
    $end            reduce using rule 10 (expression -> INT .)
    RRB             reduce using rule 10 (expression -> INT .)


state 7

    (11) expression -> FLOAT .

    MULTIPLY        reduce using rule 11 (expression -> FLOAT .)
    DIVIDE          reduce using rule 11 (expression -> FLOAT .)
    PLUS            reduce using rule 11 (expression -> FLOAT .)
    MINUS           reduce using rule 11 (expression -> FLOAT .)
    $end            reduce using rule 11 (expression -> FLOAT .)
    RRB             reduce using rule 11 (expression -> FLOAT .)


state 8

    (12) expression -> STRING .

    MULTIPLY        reduce using rule 12 (expression -> STRING .)
    DIVIDE          reduce using rule 12 (expression -> STRING .)
    PLUS            reduce using rule 12 (expression -> STRING .)
    MINUS           reduce using rule 12 (expression -> STRING .)
    $end            reduce using rule 12 (expression -> STRING .)
    RRB             reduce using rule 12 (expression -> STRING .)


state 9

    (13) expression -> NAME .
    (5) var_assign -> NAME . EQUALS expression

    MULTIPLY        reduce using rule 13 (expression -> NAME .)
    DIVIDE          reduce using rule 13 (expression -> NAME .)
    PLUS            reduce using rule 13 (expression -> NAME .)
    MINUS           reduce using rule 13 (expression -> NAME .)
    $end            reduce using rule 13 (expression -> NAME .)
    EQUALS          shift and go to state 15


state 10

    (6) expression -> expression MULTIPLY . expression
    (4) expression -> . PRINT LRB expression RRB
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . STRING
    (13) expression -> . NAME

    PRINT           shift and go to state 5
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 17

    expression                     shift and go to state 16

state 11

    (7) expression -> expression DIVIDE . expression
    (4) expression -> . PRINT LRB expression RRB
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . STRING
    (13) expression -> . NAME

    PRINT           shift and go to state 5
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 17

    expression                     shift and go to state 18

state 12

    (8) expression -> expression PLUS . expression
    (4) expression -> . PRINT LRB expression RRB
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . STRING
    (13) expression -> . NAME

    PRINT           shift and go to state 5
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 17

    expression                     shift and go to state 19

state 13

    (9) expression -> expression MINUS . expression
    (4) expression -> . PRINT LRB expression RRB
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . STRING
    (13) expression -> . NAME

    PRINT           shift and go to state 5
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 17

    expression                     shift and go to state 20

state 14

    (4) expression -> PRINT LRB . expression RRB
    (4) expression -> . PRINT LRB expression RRB
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . STRING
    (13) expression -> . NAME

    PRINT           shift and go to state 5
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 17

    expression                     shift and go to state 21

state 15

    (5) var_assign -> NAME EQUALS . expression
    (4) expression -> . PRINT LRB expression RRB
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . INT
    (11) expression -> . FLOAT
    (12) expression -> . STRING
    (13) expression -> . NAME

    PRINT           shift and go to state 5
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    STRING          shift and go to state 8
    NAME            shift and go to state 17

    expression                     shift and go to state 22

state 16

    (6) expression -> expression MULTIPLY expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression

    MULTIPLY        reduce using rule 6 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 6 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 6 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 6 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 6 (expression -> expression MULTIPLY expression .)
    RRB             reduce using rule 6 (expression -> expression MULTIPLY expression .)

  ! MULTIPLY        [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]


state 17

    (13) expression -> NAME .

    MULTIPLY        reduce using rule 13 (expression -> NAME .)
    DIVIDE          reduce using rule 13 (expression -> NAME .)
    PLUS            reduce using rule 13 (expression -> NAME .)
    MINUS           reduce using rule 13 (expression -> NAME .)
    $end            reduce using rule 13 (expression -> NAME .)
    RRB             reduce using rule 13 (expression -> NAME .)


state 18

    (7) expression -> expression DIVIDE expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression

    MULTIPLY        reduce using rule 7 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 7 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 7 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 7 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 7 (expression -> expression DIVIDE expression .)
    RRB             reduce using rule 7 (expression -> expression DIVIDE expression .)

  ! MULTIPLY        [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]


state 19

    (8) expression -> expression PLUS expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression

    PLUS            reduce using rule 8 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 8 (expression -> expression PLUS expression .)
    $end            reduce using rule 8 (expression -> expression PLUS expression .)
    RRB             reduce using rule 8 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 10
    DIVIDE          shift and go to state 11

  ! MULTIPLY        [ reduce using rule 8 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 8 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]


state 20

    (9) expression -> expression MINUS expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression

    PLUS            reduce using rule 9 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 9 (expression -> expression MINUS expression .)
    $end            reduce using rule 9 (expression -> expression MINUS expression .)
    RRB             reduce using rule 9 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 10
    DIVIDE          shift and go to state 11

  ! MULTIPLY        [ reduce using rule 9 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 9 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]


state 21

    (4) expression -> PRINT LRB expression . RRB
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression

    RRB             shift and go to state 23
    MULTIPLY        shift and go to state 10
    DIVIDE          shift and go to state 11
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13


state 22

    (5) var_assign -> NAME EQUALS expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression

    $end            reduce using rule 5 (var_assign -> NAME EQUALS expression .)
    MULTIPLY        shift and go to state 10
    DIVIDE          shift and go to state 11
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13


state 23

    (4) expression -> PRINT LRB expression RRB .

    MULTIPLY        reduce using rule 4 (expression -> PRINT LRB expression RRB .)
    DIVIDE          reduce using rule 4 (expression -> PRINT LRB expression RRB .)
    PLUS            reduce using rule 4 (expression -> PRINT LRB expression RRB .)
    MINUS           reduce using rule 4 (expression -> PRINT LRB expression RRB .)
    $end            reduce using rule 4 (expression -> PRINT LRB expression RRB .)
    RRB             reduce using rule 4 (expression -> PRINT LRB expression RRB .)

