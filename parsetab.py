
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQUALEQUALNEleftLTLEGTGEleftPLUSMINUSleftMULTIPLYDIVIDEPOWERrightNOTAND COMMA DECREMENT DIVIDE DO DOT DOUBLE EQUALEQUAL EQUALS False GE GT IDENTIFIER INCREMENT INT LCB LE LRB LT MINUS MOD MULTIPLY NE NOT OR PLUS POWER PRINT RCB RRB SEMICOLON STRING STRUCT TYPEBOOL TYPEDOUBLE TYPEINT TYPESTRING True WHILE\n    calc : multiple\n        | empty\n    \n    expression : PRINT LRB optargs RRB\n    optargs : argsoptargs : args : expression COMMA argsargs : expression\n    var_declaration : TYPEINT IDENTIFIER EQUALS expression\n                    | TYPEDOUBLE IDENTIFIER EQUALS expression\n                    | TYPESTRING IDENTIFIER EQUALS expression\n                    | TYPEBOOL IDENTIFIER EQUALS expression\n    \n    var_assign : TYPEINT IDENTIFIER \n                | TYPEDOUBLE IDENTIFIER \n                | TYPESTRING IDENTIFIER \n                | TYPEBOOL IDENTIFIER \n    \n    struct_var_assign : IDENTIFIER IDENTIFIER\n    \n    expression : expression MULTIPLY expression\n                | expression DIVIDE expression\n                | expression PLUS expression\n                | expression MINUS expression\n                | expression POWER expression\n                | expression EQUALEQUAL expression\n                | expression NE expression\n                | expression LT expression\n                | expression LE expression\n                | expression GT expression\n                | expression GE expression\n                | expression AND expression\n                | expression OR expression\n                | expression MOD expression\n    \n    multiple : expression SEMICOLON multiple\n             | var_declaration SEMICOLON multiple\n             | struct_dec SEMICOLON multiple\n             | var_assign SEMICOLON multiple\n             | struct_var_assign SEMICOLON multiple\n    multiple : \n    expression : DO LCB multiple RCB WHILE LRB expression RRB\n    \n    expression : STRUCT IDENTIFIER LCB multiple RCB \n     \n    struct_dec : IDENTIFIER DOT IDENTIFIER EQUALS expression\n    \n    expression : LRB expression RRB\n    \n    expression : expression INCREMENT\n               | expression DECREMENT \n    \n    expression : LRB expression INCREMENT RRB\n               | LRB expression DECREMENT RRB\n    \n    expression : INT\n              | DOUBLE\n              | STRING\n    \n    expression : False\n                | True\n    \n    expression : IDENTIFIER\n    \n    expression : IDENTIFIER DOT IDENTIFIER\n    \n    expression : MINUS expression\n    \n    expression : NOT expression\n    \n    expression : LRB NOT expression RRB\n    \n    empty :\n\n    '
    
_lr_action_items = {'$end':([0,1,2,3,25,42,43,44,45,60,75,76,77,78,],[-36,0,-1,-2,-36,-36,-36,-36,-36,-31,-32,-33,-34,-35,]),'PRINT':([0,10,11,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,48,51,88,90,91,92,93,95,102,111,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'DO':([0,10,11,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,48,51,88,90,91,92,93,95,102,111,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'STRUCT':([0,10,11,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,48,51,88,90,91,92,93,95,102,111,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'LRB':([0,9,10,11,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,48,51,88,90,91,92,93,95,102,108,111,],[10,46,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,111,10,]),'INT':([0,10,11,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,48,51,88,90,91,92,93,95,102,111,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'DOUBLE':([0,10,11,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,48,51,88,90,91,92,93,95,102,111,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'STRING':([0,10,11,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,48,51,88,90,91,92,93,95,102,111,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'False':([0,10,11,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,48,51,88,90,91,92,93,95,102,111,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'True':([0,10,11,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,48,51,88,90,91,92,93,95,102,111,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'IDENTIFIER':([0,10,11,13,14,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,48,51,54,86,88,90,91,92,93,95,102,111,],[14,49,49,52,53,49,56,57,58,59,14,49,49,49,49,49,49,49,49,49,49,49,49,49,49,14,14,14,14,49,49,14,89,99,14,49,49,49,49,49,49,49,]),'MINUS':([0,4,10,11,14,15,16,17,18,19,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,88,89,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,109,110,111,112,113,],[11,29,11,11,-50,-45,-46,-47,-48,-49,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-41,-42,11,11,11,11,11,29,11,-50,-52,11,-53,-17,-18,-19,-20,-21,29,29,29,29,29,29,29,29,29,29,-40,-41,-42,-53,11,-51,11,11,11,11,-3,11,-43,-44,-54,-51,11,29,29,29,29,-38,29,11,29,-37,]),'NOT':([0,10,11,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,48,51,88,90,91,92,93,95,102,111,],[20,48,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'TYPEINT':([0,25,42,43,44,45,51,88,],[21,21,21,21,21,21,21,21,]),'TYPEDOUBLE':([0,25,42,43,44,45,51,88,],[22,22,22,22,22,22,22,22,]),'TYPESTRING':([0,25,42,43,44,45,51,88,],[23,23,23,23,23,23,23,23,]),'TYPEBOOL':([0,25,42,43,44,45,51,88,],[24,24,24,24,24,24,24,24,]),'SEMICOLON':([4,5,6,7,8,14,15,16,17,18,19,40,41,49,50,53,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,82,89,94,96,97,98,99,103,104,105,106,109,110,113,],[25,42,43,44,45,-50,-45,-46,-47,-48,-49,-41,-42,-50,-52,-16,-53,-12,-13,-14,-15,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-40,-51,-3,-43,-44,-54,-51,-8,-9,-10,-11,-38,-39,-37,]),'MULTIPLY':([4,14,15,16,17,18,19,40,41,47,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,89,94,96,97,98,99,103,104,105,106,109,110,112,113,],[26,-50,-45,-46,-47,-48,-49,-41,-42,26,-50,26,-53,-17,-18,26,26,-21,26,26,26,26,26,26,26,26,26,26,-40,-41,-42,-53,-51,-3,-43,-44,-54,-51,26,26,26,26,-38,26,26,-37,]),'DIVIDE':([4,14,15,16,17,18,19,40,41,47,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,89,94,96,97,98,99,103,104,105,106,109,110,112,113,],[27,-50,-45,-46,-47,-48,-49,-41,-42,27,-50,27,-53,-17,-18,27,27,-21,27,27,27,27,27,27,27,27,27,27,-40,-41,-42,-53,-51,-3,-43,-44,-54,-51,27,27,27,27,-38,27,27,-37,]),'PLUS':([4,14,15,16,17,18,19,40,41,47,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,89,94,96,97,98,99,103,104,105,106,109,110,112,113,],[28,-50,-45,-46,-47,-48,-49,-41,-42,28,-50,-52,-53,-17,-18,-19,-20,-21,28,28,28,28,28,28,28,28,28,28,-40,-41,-42,-53,-51,-3,-43,-44,-54,-51,28,28,28,28,-38,28,28,-37,]),'POWER':([4,14,15,16,17,18,19,40,41,47,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,89,94,96,97,98,99,103,104,105,106,109,110,112,113,],[30,-50,-45,-46,-47,-48,-49,-41,-42,30,-50,30,-53,-17,-18,30,30,-21,30,30,30,30,30,30,30,30,30,30,-40,-41,-42,-53,-51,-3,-43,-44,-54,-51,30,30,30,30,-38,30,30,-37,]),'EQUALEQUAL':([4,14,15,16,17,18,19,40,41,47,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,89,94,96,97,98,99,103,104,105,106,109,110,112,113,],[31,-50,-45,-46,-47,-48,-49,-41,-42,31,-50,-52,-53,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,31,31,31,31,-40,-41,-42,-53,-51,-3,-43,-44,-54,-51,31,31,31,31,-38,31,31,-37,]),'NE':([4,14,15,16,17,18,19,40,41,47,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,89,94,96,97,98,99,103,104,105,106,109,110,112,113,],[32,-50,-45,-46,-47,-48,-49,-41,-42,32,-50,-52,-53,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,32,32,32,32,-40,-41,-42,-53,-51,-3,-43,-44,-54,-51,32,32,32,32,-38,32,32,-37,]),'LT':([4,14,15,16,17,18,19,40,41,47,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,89,94,96,97,98,99,103,104,105,106,109,110,112,113,],[33,-50,-45,-46,-47,-48,-49,-41,-42,33,-50,-52,-53,-17,-18,-19,-20,-21,33,33,-24,-25,-26,-27,33,33,33,33,-40,-41,-42,-53,-51,-3,-43,-44,-54,-51,33,33,33,33,-38,33,33,-37,]),'LE':([4,14,15,16,17,18,19,40,41,47,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,89,94,96,97,98,99,103,104,105,106,109,110,112,113,],[34,-50,-45,-46,-47,-48,-49,-41,-42,34,-50,-52,-53,-17,-18,-19,-20,-21,34,34,-24,-25,-26,-27,34,34,34,34,-40,-41,-42,-53,-51,-3,-43,-44,-54,-51,34,34,34,34,-38,34,34,-37,]),'GT':([4,14,15,16,17,18,19,40,41,47,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,89,94,96,97,98,99,103,104,105,106,109,110,112,113,],[35,-50,-45,-46,-47,-48,-49,-41,-42,35,-50,-52,-53,-17,-18,-19,-20,-21,35,35,-24,-25,-26,-27,35,35,35,35,-40,-41,-42,-53,-51,-3,-43,-44,-54,-51,35,35,35,35,-38,35,35,-37,]),'GE':([4,14,15,16,17,18,19,40,41,47,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,89,94,96,97,98,99,103,104,105,106,109,110,112,113,],[36,-50,-45,-46,-47,-48,-49,-41,-42,36,-50,-52,-53,-17,-18,-19,-20,-21,36,36,-24,-25,-26,-27,36,36,36,36,-40,-41,-42,-53,-51,-3,-43,-44,-54,-51,36,36,36,36,-38,36,36,-37,]),'AND':([4,14,15,16,17,18,19,40,41,47,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,89,94,96,97,98,99,103,104,105,106,109,110,112,113,],[37,-50,-45,-46,-47,-48,-49,-41,-42,37,-50,-52,-53,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,37,37,37,-40,-41,-42,-53,-51,-3,-43,-44,-54,-51,37,37,37,37,-38,37,37,-37,]),'OR':([4,14,15,16,17,18,19,40,41,47,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,89,94,96,97,98,99,103,104,105,106,109,110,112,113,],[38,-50,-45,-46,-47,-48,-49,-41,-42,38,-50,-52,-53,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,38,38,-40,-41,-42,-53,-51,-3,-43,-44,-54,-51,38,38,38,38,-38,38,38,-37,]),'MOD':([4,14,15,16,17,18,19,40,41,47,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,89,94,96,97,98,99,103,104,105,106,109,110,112,113,],[39,-50,-45,-46,-47,-48,-49,-41,-42,39,-50,-52,-53,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,39,39,-40,-41,-42,-53,-51,-3,-43,-44,-54,-51,39,39,39,39,-38,39,39,-37,]),'INCREMENT':([4,14,15,16,17,18,19,40,41,47,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,89,94,96,97,98,99,103,104,105,106,109,110,112,113,],[40,-50,-45,-46,-47,-48,-49,-41,-42,83,-50,-52,-53,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,40,40,-40,-41,-42,-53,-51,-3,-43,-44,-54,-51,40,40,40,40,-38,40,40,-37,]),'DECREMENT':([4,14,15,16,17,18,19,40,41,47,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,89,94,96,97,98,99,103,104,105,106,109,110,112,113,],[41,-50,-45,-46,-47,-48,-49,-41,-42,84,-50,-52,-53,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,41,41,-40,-41,-42,-53,-51,-3,-43,-44,-54,-51,41,41,41,41,-38,41,41,-37,]),'LCB':([12,52,],[51,88,]),'DOT':([14,49,],[54,86,]),'RRB':([15,16,17,18,19,40,41,46,47,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,79,80,81,82,83,84,85,94,96,97,98,99,107,109,112,113,],[-45,-46,-47,-48,-49,-41,-42,-5,82,-50,-52,-53,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,94,-4,-7,-40,96,97,-53,-3,-43,-44,-54,-51,-6,-38,113,-37,]),'COMMA':([15,16,17,18,19,40,41,49,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,94,96,97,98,99,109,113,],[-45,-46,-47,-48,-49,-41,-42,-50,-52,-53,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,95,-40,-3,-43,-44,-54,-51,-38,-37,]),'RCB':([25,42,43,44,45,51,60,75,76,77,78,87,88,101,],[-36,-36,-36,-36,-36,-36,-31,-32,-33,-34,-35,100,-36,109,]),'EQUALS':([56,57,58,59,89,],[90,91,92,93,102,]),'WHILE':([100,],[108,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'calc':([0,],[1,]),'multiple':([0,25,42,43,44,45,51,88,],[2,60,75,76,77,78,87,101,]),'empty':([0,],[3,]),'expression':([0,10,11,20,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,48,51,88,90,91,92,93,95,102,111,],[4,47,50,55,4,61,62,63,64,65,66,67,68,69,70,71,72,73,74,4,4,4,4,81,85,4,4,103,104,105,106,81,110,112,]),'var_declaration':([0,25,42,43,44,45,51,88,],[5,5,5,5,5,5,5,5,]),'struct_dec':([0,25,42,43,44,45,51,88,],[6,6,6,6,6,6,6,6,]),'var_assign':([0,25,42,43,44,45,51,88,],[7,7,7,7,7,7,7,7,]),'struct_var_assign':([0,25,42,43,44,45,51,88,],[8,8,8,8,8,8,8,8,]),'optargs':([46,],[79,]),'args':([46,95,],[80,107,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> calc","S'",1,None,None,None),
  ('calc -> multiple','calc',1,'p_calc','myParser.py',18),
  ('calc -> empty','calc',1,'p_calc','myParser.py',19),
  ('expression -> PRINT LRB optargs RRB','expression',4,'p_print_expresion','myParser.py',26),
  ('optargs -> args','optargs',1,'p_optargs','myParser.py',32),
  ('optargs -> <empty>','optargs',0,'p_optargsempty','myParser.py',37),
  ('args -> expression COMMA args','args',3,'p_args','myParser.py',42),
  ('args -> expression','args',1,'p_args_last','myParser.py',47),
  ('var_declaration -> TYPEINT IDENTIFIER EQUALS expression','var_declaration',4,'p_var_declaration','myParser.py',53),
  ('var_declaration -> TYPEDOUBLE IDENTIFIER EQUALS expression','var_declaration',4,'p_var_declaration','myParser.py',54),
  ('var_declaration -> TYPESTRING IDENTIFIER EQUALS expression','var_declaration',4,'p_var_declaration','myParser.py',55),
  ('var_declaration -> TYPEBOOL IDENTIFIER EQUALS expression','var_declaration',4,'p_var_declaration','myParser.py',56),
  ('var_assign -> TYPEINT IDENTIFIER','var_assign',2,'p_var_assignment','myParser.py',63),
  ('var_assign -> TYPEDOUBLE IDENTIFIER','var_assign',2,'p_var_assignment','myParser.py',64),
  ('var_assign -> TYPESTRING IDENTIFIER','var_assign',2,'p_var_assignment','myParser.py',65),
  ('var_assign -> TYPEBOOL IDENTIFIER','var_assign',2,'p_var_assignment','myParser.py',66),
  ('struct_var_assign -> IDENTIFIER IDENTIFIER','struct_var_assign',2,'p_struct_assign','myParser.py',73),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','myParser.py',80),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','myParser.py',81),
  ('expression -> expression PLUS expression','expression',3,'p_expression','myParser.py',82),
  ('expression -> expression MINUS expression','expression',3,'p_expression','myParser.py',83),
  ('expression -> expression POWER expression','expression',3,'p_expression','myParser.py',84),
  ('expression -> expression EQUALEQUAL expression','expression',3,'p_expression','myParser.py',85),
  ('expression -> expression NE expression','expression',3,'p_expression','myParser.py',86),
  ('expression -> expression LT expression','expression',3,'p_expression','myParser.py',87),
  ('expression -> expression LE expression','expression',3,'p_expression','myParser.py',88),
  ('expression -> expression GT expression','expression',3,'p_expression','myParser.py',89),
  ('expression -> expression GE expression','expression',3,'p_expression','myParser.py',90),
  ('expression -> expression AND expression','expression',3,'p_expression','myParser.py',91),
  ('expression -> expression OR expression','expression',3,'p_expression','myParser.py',92),
  ('expression -> expression MOD expression','expression',3,'p_expression','myParser.py',93),
  ('multiple -> expression SEMICOLON multiple','multiple',3,'p_multiple_lines','myParser.py',100),
  ('multiple -> var_declaration SEMICOLON multiple','multiple',3,'p_multiple_lines','myParser.py',101),
  ('multiple -> struct_dec SEMICOLON multiple','multiple',3,'p_multiple_lines','myParser.py',102),
  ('multiple -> var_assign SEMICOLON multiple','multiple',3,'p_multiple_lines','myParser.py',103),
  ('multiple -> struct_var_assign SEMICOLON multiple','multiple',3,'p_multiple_lines','myParser.py',104),
  ('multiple -> <empty>','multiple',0,'p_multiple_empty','myParser.py',110),
  ('expression -> DO LCB multiple RCB WHILE LRB expression RRB','expression',8,'p_expression_dowhile','myParser.py',116),
  ('expression -> STRUCT IDENTIFIER LCB multiple RCB','expression',5,'p_expression_struct','myParser.py',123),
  ('struct_dec -> IDENTIFIER DOT IDENTIFIER EQUALS expression','struct_dec',5,'p_struct_declaration','myParser.py',130),
  ('expression -> LRB expression RRB','expression',3,'p_bracket_expression','myParser.py',137),
  ('expression -> expression INCREMENT','expression',2,'p_increment_decrement','myParser.py',144),
  ('expression -> expression DECREMENT','expression',2,'p_increment_decrement','myParser.py',145),
  ('expression -> LRB expression INCREMENT RRB','expression',4,'p_bracket_increment_decrement','myParser.py',152),
  ('expression -> LRB expression DECREMENT RRB','expression',4,'p_bracket_increment_decrement','myParser.py',153),
  ('expression -> INT','expression',1,'p_expression_int_double_string','myParser.py',160),
  ('expression -> DOUBLE','expression',1,'p_expression_int_double_string','myParser.py',161),
  ('expression -> STRING','expression',1,'p_expression_int_double_string','myParser.py',162),
  ('expression -> False','expression',1,'p_expression_bool','myParser.py',169),
  ('expression -> True','expression',1,'p_expression_bool','myParser.py',170),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','myParser.py',177),
  ('expression -> IDENTIFIER DOT IDENTIFIER','expression',3,'p_expression_struct_identifier','myParser.py',184),
  ('expression -> MINUS expression','expression',2,'p_expression_negate','myParser.py',191),
  ('expression -> NOT expression','expression',2,'p_not_expression','myParser.py',198),
  ('expression -> LRB NOT expression RRB','expression',4,'p_not_expression_bracket','myParser.py',205),
  ('empty -> <empty>','empty',0,'p_empty','myParser.py',212),
]
