
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQUALEQUALNEleftLTLEGTGEleftPLUSMINUSleftMULTIPLYDIVIDEPOWERrightNOTAND COMMA DECREMENT DIVIDE DOUBLE EQUALEQUAL EQUALS FALSE GE GT IDENTIFIER INCREMENT INT LE LRB LT MINUS MULTIPLY NE NOT OR PLUS POWER PRINT RRB SEMICOLON STRING TRUE TYPEBOOL TYPEDOUBLE TYPEINT TYPESTRING\n    calc : expression\n        | var_declaration\n        | empty\n    \n    expression : PRINT LRB optargs RRB\n    optargs : argsoptargs : args : expression COMMA argsargs : expression\n    var_declaration : TYPEINT IDENTIFIER EQUALS expression\n                    | TYPEDOUBLE IDENTIFIER EQUALS expression\n                    | TYPESTRING IDENTIFIER EQUALS expression\n                    | TYPEBOOL IDENTIFIER EQUALS expression\n    \n    expression : expression MULTIPLY expression\n                | expression DIVIDE expression\n                | expression PLUS expression\n                | expression MINUS expression\n                | expression POWER expression\n                | expression EQUALEQUAL expression\n                | expression NE expression\n                | expression LT expression\n                | expression LE expression\n                | expression GT expression\n                | expression GE expression\n                | expression AND expression\n                | expression OR expression\n    \n    expression : LRB expression MULTIPLY expression RRB\n                | LRB expression DIVIDE expression RRB\n                | LRB expression PLUS expression RRB\n                | LRB expression MINUS expression RRB\n                | LRB expression POWER expression RRB\n                | LRB expression NE expression RRB\n                | LRB expression LT expression RRB\n                | LRB expression LE expression RRB\n                | LRB expression GT expression RRB\n                | LRB expression GE expression RRB\n                | LRB expression AND expression RRB\n                | LRB expression OR expression RRB\n    \n    expression : expression INCREMENT\n               | expression DECREMENT \n    \n    expression : LRB expression INCREMENT RRB\n               | LRB expression DECREMENT RRB\n    \n    expression : INT\n              | DOUBLE\n              | STRING\n    \n    expression : FALSE\n                | TRUE\n    \n    expression : IDENTIFIER\n    \n    expression : MINUS expression\n    \n    expression : NOT expression\n    \n    empty :\n\n    '
    
_lr_action_items = {'PRINT':([0,6,7,14,19,20,21,22,23,24,25,26,27,28,29,30,31,34,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,77,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'LRB':([0,5,6,7,14,19,20,21,22,23,24,25,26,27,28,29,30,31,34,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,77,],[6,34,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'INT':([0,6,7,14,19,20,21,22,23,24,25,26,27,28,29,30,31,34,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,77,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'DOUBLE':([0,6,7,14,19,20,21,22,23,24,25,26,27,28,29,30,31,34,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,77,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'STRING':([0,6,7,14,19,20,21,22,23,24,25,26,27,28,29,30,31,34,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,77,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'FALSE':([0,6,7,14,19,20,21,22,23,24,25,26,27,28,29,30,31,34,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,77,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'TRUE':([0,6,7,14,19,20,21,22,23,24,25,26,27,28,29,30,31,34,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,77,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'IDENTIFIER':([0,6,7,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,77,],[13,13,13,13,38,39,40,41,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'MINUS':([0,2,6,7,8,9,10,11,12,13,14,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,],[7,22,7,7,-42,-43,-44,-45,-46,-47,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-38,-39,7,61,-48,-49,-13,-14,-15,-16,-17,22,22,22,22,22,22,22,22,22,7,7,7,7,7,7,7,7,7,7,7,7,-38,-39,7,7,7,7,-4,7,-13,-14,-15,-16,-17,22,22,22,22,22,22,22,-40,-41,22,22,22,22,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'NOT':([0,6,7,14,19,20,21,22,23,24,25,26,27,28,29,30,31,34,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,77,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'TYPEINT':([0,],[15,]),'TYPEDOUBLE':([0,],[16,]),'TYPESTRING':([0,],[17,]),'TYPEBOOL':([0,],[18,]),'$end':([0,1,2,3,4,8,9,10,11,12,13,32,33,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,76,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,],[-50,0,-1,-2,-3,-42,-43,-44,-45,-46,-47,-38,-39,-48,-49,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-4,-40,-41,-9,-10,-11,-12,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'MULTIPLY':([2,8,9,10,11,12,13,32,33,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,70,71,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,],[19,-42,-43,-44,-45,-46,-47,-38,-39,58,19,-49,-13,-14,19,19,-17,19,19,19,19,19,19,19,19,19,-38,-39,-4,-13,-14,19,19,-17,19,19,19,19,19,19,19,-40,-41,19,19,19,19,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'DIVIDE':([2,8,9,10,11,12,13,32,33,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,70,71,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,],[20,-42,-43,-44,-45,-46,-47,-38,-39,59,20,-49,-13,-14,20,20,-17,20,20,20,20,20,20,20,20,20,-38,-39,-4,-13,-14,20,20,-17,20,20,20,20,20,20,20,-40,-41,20,20,20,20,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'PLUS':([2,8,9,10,11,12,13,32,33,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,70,71,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,],[21,-42,-43,-44,-45,-46,-47,-38,-39,60,-48,-49,-13,-14,-15,-16,-17,21,21,21,21,21,21,21,21,21,-38,-39,-4,-13,-14,-15,-16,-17,21,21,21,21,21,21,21,-40,-41,21,21,21,21,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'POWER':([2,8,9,10,11,12,13,32,33,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,70,71,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,],[23,-42,-43,-44,-45,-46,-47,-38,-39,62,23,-49,-13,-14,23,23,-17,23,23,23,23,23,23,23,23,23,-38,-39,-4,-13,-14,23,23,-17,23,23,23,23,23,23,23,-40,-41,23,23,23,23,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'EQUALEQUAL':([2,8,9,10,11,12,13,32,33,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,70,71,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,],[24,-42,-43,-44,-45,-46,-47,-38,-39,24,-48,-49,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,24,24,24,-38,-39,-4,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,24,24,-40,-41,24,24,24,24,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'NE':([2,8,9,10,11,12,13,32,33,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,70,71,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,],[25,-42,-43,-44,-45,-46,-47,-38,-39,63,-48,-49,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,25,25,25,-38,-39,-4,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,25,25,-40,-41,25,25,25,25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'LT':([2,8,9,10,11,12,13,32,33,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,70,71,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,],[26,-42,-43,-44,-45,-46,-47,-38,-39,64,-48,-49,-13,-14,-15,-16,-17,26,26,-20,-21,-22,-23,26,26,26,-38,-39,-4,-13,-14,-15,-16,-17,26,-20,-21,-22,-23,26,26,-40,-41,26,26,26,26,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'LE':([2,8,9,10,11,12,13,32,33,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,70,71,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,],[27,-42,-43,-44,-45,-46,-47,-38,-39,65,-48,-49,-13,-14,-15,-16,-17,27,27,-20,-21,-22,-23,27,27,27,-38,-39,-4,-13,-14,-15,-16,-17,27,-20,-21,-22,-23,27,27,-40,-41,27,27,27,27,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'GT':([2,8,9,10,11,12,13,32,33,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,70,71,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,],[28,-42,-43,-44,-45,-46,-47,-38,-39,66,-48,-49,-13,-14,-15,-16,-17,28,28,-20,-21,-22,-23,28,28,28,-38,-39,-4,-13,-14,-15,-16,-17,28,-20,-21,-22,-23,28,28,-40,-41,28,28,28,28,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'GE':([2,8,9,10,11,12,13,32,33,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,70,71,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,],[29,-42,-43,-44,-45,-46,-47,-38,-39,67,-48,-49,-13,-14,-15,-16,-17,29,29,-20,-21,-22,-23,29,29,29,-38,-39,-4,-13,-14,-15,-16,-17,29,-20,-21,-22,-23,29,29,-40,-41,29,29,29,29,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'AND':([2,8,9,10,11,12,13,32,33,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,70,71,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,],[30,-42,-43,-44,-45,-46,-47,-38,-39,68,-48,-49,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,30,30,-38,-39,-4,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,30,-40,-41,30,30,30,30,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'OR':([2,8,9,10,11,12,13,32,33,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,70,71,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,],[31,-42,-43,-44,-45,-46,-47,-38,-39,69,-48,-49,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,31,-38,-39,-4,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-40,-41,31,31,31,31,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'INCREMENT':([2,8,9,10,11,12,13,32,33,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,70,71,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,],[32,-42,-43,-44,-45,-46,-47,-38,-39,70,-48,-49,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,32,-38,-39,-4,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-40,-41,32,32,32,32,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'DECREMENT':([2,8,9,10,11,12,13,32,33,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,70,71,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,],[33,-42,-43,-44,-45,-46,-47,-38,-39,71,-48,-49,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,33,-38,-39,-4,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-40,-41,33,33,33,33,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'COMMA':([8,9,10,11,12,13,32,33,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,76,90,91,97,98,99,100,101,102,103,104,105,106,107,108,],[-42,-43,-44,-45,-46,-47,-38,-39,-48,-49,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,77,-4,-40,-41,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'RRB':([8,9,10,11,12,13,32,33,34,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,70,71,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,96,97,98,99,100,101,102,103,104,105,106,107,108,],[-42,-43,-44,-45,-46,-47,-38,-39,-6,-48,-49,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,76,-5,-8,90,91,-4,97,98,99,100,101,102,103,104,105,106,107,108,-40,-41,-7,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,]),'EQUALS':([38,39,40,41,],[72,73,74,75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'calc':([0,],[1,]),'expression':([0,6,7,14,19,20,21,22,23,24,25,26,27,28,29,30,31,34,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,77,],[2,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,57,78,79,80,81,82,83,84,85,86,87,88,89,92,93,94,95,57,]),'var_declaration':([0,],[3,]),'empty':([0,],[4,]),'optargs':([34,],[55,]),'args':([34,77,],[56,96,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> calc","S'",1,None,None,None),
  ('calc -> expression','calc',1,'p_calc','myParser.py',18),
  ('calc -> var_declaration','calc',1,'p_calc','myParser.py',19),
  ('calc -> empty','calc',1,'p_calc','myParser.py',20),
  ('expression -> PRINT LRB optargs RRB','expression',4,'p_print_expresion','myParser.py',28),
  ('optargs -> args','optargs',1,'p_optargs','myParser.py',34),
  ('optargs -> <empty>','optargs',0,'p_optargsempty','myParser.py',39),
  ('args -> expression COMMA args','args',3,'p_args','myParser.py',44),
  ('args -> expression','args',1,'p_args_last','myParser.py',49),
  ('var_declaration -> TYPEINT IDENTIFIER EQUALS expression','var_declaration',4,'p_var_declaration','myParser.py',55),
  ('var_declaration -> TYPEDOUBLE IDENTIFIER EQUALS expression','var_declaration',4,'p_var_declaration','myParser.py',56),
  ('var_declaration -> TYPESTRING IDENTIFIER EQUALS expression','var_declaration',4,'p_var_declaration','myParser.py',57),
  ('var_declaration -> TYPEBOOL IDENTIFIER EQUALS expression','var_declaration',4,'p_var_declaration','myParser.py',58),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','myParser.py',65),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','myParser.py',66),
  ('expression -> expression PLUS expression','expression',3,'p_expression','myParser.py',67),
  ('expression -> expression MINUS expression','expression',3,'p_expression','myParser.py',68),
  ('expression -> expression POWER expression','expression',3,'p_expression','myParser.py',69),
  ('expression -> expression EQUALEQUAL expression','expression',3,'p_expression','myParser.py',70),
  ('expression -> expression NE expression','expression',3,'p_expression','myParser.py',71),
  ('expression -> expression LT expression','expression',3,'p_expression','myParser.py',72),
  ('expression -> expression LE expression','expression',3,'p_expression','myParser.py',73),
  ('expression -> expression GT expression','expression',3,'p_expression','myParser.py',74),
  ('expression -> expression GE expression','expression',3,'p_expression','myParser.py',75),
  ('expression -> expression AND expression','expression',3,'p_expression','myParser.py',76),
  ('expression -> expression OR expression','expression',3,'p_expression','myParser.py',77),
  ('expression -> LRB expression MULTIPLY expression RRB','expression',5,'p_bracket_expression','myParser.py',84),
  ('expression -> LRB expression DIVIDE expression RRB','expression',5,'p_bracket_expression','myParser.py',85),
  ('expression -> LRB expression PLUS expression RRB','expression',5,'p_bracket_expression','myParser.py',86),
  ('expression -> LRB expression MINUS expression RRB','expression',5,'p_bracket_expression','myParser.py',87),
  ('expression -> LRB expression POWER expression RRB','expression',5,'p_bracket_expression','myParser.py',88),
  ('expression -> LRB expression NE expression RRB','expression',5,'p_bracket_expression','myParser.py',89),
  ('expression -> LRB expression LT expression RRB','expression',5,'p_bracket_expression','myParser.py',90),
  ('expression -> LRB expression LE expression RRB','expression',5,'p_bracket_expression','myParser.py',91),
  ('expression -> LRB expression GT expression RRB','expression',5,'p_bracket_expression','myParser.py',92),
  ('expression -> LRB expression GE expression RRB','expression',5,'p_bracket_expression','myParser.py',93),
  ('expression -> LRB expression AND expression RRB','expression',5,'p_bracket_expression','myParser.py',94),
  ('expression -> LRB expression OR expression RRB','expression',5,'p_bracket_expression','myParser.py',95),
  ('expression -> expression INCREMENT','expression',2,'p_increment_decrement','myParser.py',102),
  ('expression -> expression DECREMENT','expression',2,'p_increment_decrement','myParser.py',103),
  ('expression -> LRB expression INCREMENT RRB','expression',4,'p_bracket_increment_decrement','myParser.py',110),
  ('expression -> LRB expression DECREMENT RRB','expression',4,'p_bracket_increment_decrement','myParser.py',111),
  ('expression -> INT','expression',1,'p_expression_int_double_string','myParser.py',118),
  ('expression -> DOUBLE','expression',1,'p_expression_int_double_string','myParser.py',119),
  ('expression -> STRING','expression',1,'p_expression_int_double_string','myParser.py',120),
  ('expression -> FALSE','expression',1,'p_expression_bool','myParser.py',127),
  ('expression -> TRUE','expression',1,'p_expression_bool','myParser.py',128),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','myParser.py',135),
  ('expression -> MINUS expression','expression',2,'p_expression_negate','myParser.py',142),
  ('expression -> NOT expression','expression',2,'p_not_expression','myParser.py',149),
  ('empty -> <empty>','empty',0,'p_empty','myParser.py',156),
]
